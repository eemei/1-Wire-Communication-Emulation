/*
 * state_machine.c
 *
 *  Created on: Jul 3, 2017
 *      Author: Prince
 */
#include <stdlib.h>
#include "stm32f1xx_hal.h"
#include "state_machine.h"
#include "function.h"

UART_HandleTypeDef huart1;

/*
EventState *initEventState(){
	EventState *pInit = malloc(sizeof(EventState));
	pInit->state = INIT_STATE;
	pInit->type = UART_TX_CPL_EVT;
	return pInit;
}

void eventSM(EventState *pEvent){
	switch(pEvent->type){
	case UART_TX_CPL_EVT:
		if(pEvent->state == INIT_STATE){
			presencePulseDetect();
		}
		break;
	case UART_RX_CPL_EVT:
		break;
	case TIMEOUT_EVT:
		break;
	default:
		pEvent->type = UART_TX_CPL_EVT;
	}
}

void fsm(EventState *pState){
	switch(pState->state){
	case INIT_STATE:
		resetPulse();
		counter(2500);
		pState->state = RESPONSE_STATE;
		break;
	case RESPONSE_STATE:
		searchROM();
		pState->state = INIT_STATE;
		break;
	default:
		pState->state = INIT_STATE;
	}
}*/

BitSearchingInfo bsi = {INIT_STATE, BYTE0, BYTE0, BYTE1, BYTE0, BYTE1, BYTE0, BYTE0, BYTE0};

void bitSearchingFSM(Event evt){
	switch(bsi.state){
	case INIT_STATE:
		if(evt == UART_TX_CPL_EVT){
			presencePulseDetect();
			bsi.state = RESPONSE_STATE;
		}
		else{
			bsi.state = INIT_STATE;
		}
		break;
	case RESPONSE_STATE:
		if(evt == UART_RX_CPL_EVT){
			searchROM();
			bsi.state = COMMAND_STATE;
		}
		else{
			bsi.state = INIT_STATE;
		}
		break;
	case COMMAND_STATE:
		bsi.state = INIT_STATE;
		break;
	default:
		bsi.state = INIT_STATE;
	}
}


void counter(int count){
	volatile int i=0;
	while(i<count){
		i++;
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
	bitSearchingFSM(UART_TX_CPL_EVT);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	Event event = UART_RX_CPL_EVT;
	bitSearchingFSM(event);
}
